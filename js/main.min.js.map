{"version":3,"sources":["main.js"],"names":[],"mappingsfile":"main.min.js","sourcesContent":["\n//init\nvar left = document.getElementById('left'),\n    right = document.getElementById('right'),\n    links = document.getElementById('links'),\n    mufta = document.getElementById('mufta'),\n    data = {},\n    sizes = {\n    \twidth: mufta.getBoundingClientRect().width,\n    \theight: mufta.getBoundingClientRect().height,\n    \tcableWidth: mufta.getBoundingClientRect().width / 5,\n    \tcableHeight: 20\n    },\n    textareas = document.getElementsByTagName('textarea');\n\n\t//events\n\tfor (var n = 0; textareas[n]; n++)\n\t\ttextareas[n].addEventListener('keyup', update, false);\n\n\nfunction update() {\n\tdata = {\n\t\tleft: _createDataArray('left'),\n\t\tright: _createDataArray('right'),\n\t\tlinks: links.value.split('\\n')\n\t};\n\twhile (mufta.lastChild) {\n\t\tmufta.removeChild(mufta.lastChild);\n\t}\n\tmufta.setAttribute('height', Math.max(data.left.length, data.right.length) * sizes.cableHeight + 1);\n\trenderCables();\n\trenderLinks();\n}\n\n\nfunction renderLinks() {\n\tvar x2, y2, x1, y1, color;\n\tx1 = sizes.cableWidth;\n\tx2 = sizes.width - sizes.cableWidth;\n\n\tfor (var n = 0; n < data.links.length; n++) {\n\t\tdata.links[n] = data.links[n].trim();\n\t\tif (data.links[n] == \"\")\n\t\t\tcontinue;\n\t\tvar dn = data.links[n].split('-');\n\t\tif (data.left[+dn[0]] && data.right[+dn[1]]) {\n\t\t\tcolor = data.left[+dn[0]][data.left[+dn[0]].length - 1];\n\t\t\ty1 = +dn[0] * sizes.cableHeight + sizes.cableHeight/2;\n\t\t\ty2 = +dn[1] * sizes.cableHeight + sizes.cableHeight/2;\n\t\t\t_addLine(x1, y1, x2, y2, color);\n\t\t}\n\t}\n\tlinks.value = data.links.join('\\n');\n}\n\n\nfunction renderCables() {\n\tvar node,\n\t    color,\n\t    prev = [],\n\t    dn,\n\t    y, x, width, height;\n\n\tfor (var n = 0; data.left[n]; n++) {\n\t\tdn = data.left[n];\n\t\tcolor = dn[dn.length -1];\n\t\tnode = _addConnector(color, n, 'left');\n\n\t\tfor (var l = 0; l < dn.length - 1; l++) {\n\t\t\tif (!prev[l])\n\t\t\t\tprev[l] = {data: dn[l], n: n};\n\t\t\telse if (prev[l].data != dn[l]) {\n\t\t\t\ty = prev[l].n * sizes.cableHeight;\n\t\t\t\twidth = sizes.cableWidth / dn.length;\n\t\t\t\tx = width * l;\n\t\t\t\theight = (n - prev[l].n) * sizes.cableHeight;\n\t\t\t\tnode = _addRect(y, x, width, height, \"#fff\");\n\t\t\t\t_addText(prev[l].data, y + height/2, x + width/2, \"-90\");\n\t\t\t\tprev[l] = {data: dn[l], n: n};\n\t\t\t}\n\t\t}\n\t}\n\tfor (var l = 0; l < dn.length - 1; l++) {\n\t\ty = prev[l].n * sizes.cableHeight;\n\t\twidth = sizes.cableWidth / dn.length;\n\t\tx = width * l;\n\t\theight = (n - prev[l].n) * sizes.cableHeight;\n\t\tnode = _addRect(y, x, width, height, \"#fff\");\n\t\t_addText(prev[l].data, y + height/2, x + width/2, \"-90\");\n\t}\n\tprev = [];\n\n\tfor (var n = 0; data.right[n]; n++) {\n\t\tdn = data.right[n];\n\t\tcolor = dn[dn.length -1];\n\t\tnode = _addConnector(color, n, 'right');\n\n\t\tfor (var l = 0; l < dn.length - 1; l++) {\n\t\t\tif (!prev[l])\n\t\t\t\tprev[l] = {data: dn[l], n: n};\n\t\t\telse if (prev[l].data != dn[l]) {\n\t\t\t\ty = prev[l].n * sizes.cableHeight;\n\t\t\t\twidth = sizes.cableWidth / dn.length;\n\t\t\t\tx = sizes.width - width * (l + 1);\n\t\t\t\theight = (n - prev[l].n) * sizes.cableHeight;\n\t\t\t\tnode = _addRect(y, x, width, height, \"#fff\");\n\t\t\t\t_addText(prev[l].data, y + height/2, x + width/2, \"90\");\n\t\t\t\tprev[l] = {data: dn[l], n: n};\n\t\t\t}\n\t\t}\n\t}\n\tfor (var l = 0; l < dn.length - 1; l++) {\n\t\ty = prev[l].n * sizes.cableHeight;\n\t\twidth = sizes.cableWidth / dn.length;\n\t\tx = sizes.width - width * (l + 1);\n\t\theight = (n - prev[l].n) * sizes.cableHeight;\n\t\tnode = _addRect(y, x, width, height, \"#fff\");\n\t\t_addText(prev[l].data, y + height/2, x + width/2, \"90\");\n\t}\n}\n\n\nfunction _addConnector(color, n, pos) {\n\tvar y = n * sizes.cableHeight,\n\t    x = pos == 'left' ? 0 : sizes.width - sizes.cableWidth,\n\t    height = sizes.cableHeight,\n\t    width = sizes.cableWidth;\n\n\t_addRect(y, x, width, height, color);\n}\n\nfunction _addRect(y, x, width, height, color) {\n\tvar node = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n\ty += 1;\n\tnode.setAttribute('y', y);\n\tnode.setAttribute('x', x);\n\tnode.setAttribute('height', height);\n\tnode.setAttribute('width', width);\n\tnode.setAttribute('style', \"fill:\" + color + \"; stroke-width:1; stroke:#111\");\n\tmufta.appendChild(node);\n\treturn node;\n}\nfunction _addLine(x1, y1, x2, y2, color) {\n\tvar node = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n\tnode.setAttribute('y1', y1);\n\tnode.setAttribute('x1', x1);\n\tnode.setAttribute('y2', y2);\n\tnode.setAttribute('x2', x2);\n\tnode.setAttribute('style', \"stroke:\" + color + \"; stroke-width:2\"); //; shape-rendering:crispEdges;\n\tmufta.appendChild(node);\n\treturn node;\n}\nfunction _addText(text, y, x, rotate) {\n\tvar newText = document.createElementNS('http://www.w3.org/2000/svg',\"text\");\n\ty += 1;\n\tnewText.setAttribute(\"y\",y);\n\tnewText.setAttribute(\"x\",x);\n\tif (rotate)\n\t\tnewText.setAttribute(\"transform\",\"rotate(\" + rotate + \", \" + x + \", \" + y + \")\");\n\tnewText.setAttribute(\"font-family\",\"sans-serif\");\n\tnewText.setAttribute(\"font-size\",\"10px\");\n\tnewText.setAttribute(\"text-anchor\",\"middle\");\n\tnewText.setAttribute(\"dominant-baseline\",\"middle\");\n\tnewText.setAttribute(\"fill\",\"red\");\n\tnewText.appendChild(document.createTextNode(text));\n\tmufta.appendChild(newText);\n\treturn newText;\n}\n\n\n\nfunction _createDataArray(name) {\n\tif (!window[name] && !window[name].value) return;\n\n\tvar rows0 = window[name].value.split('\\n'),//.sort();\n\t    rows = [];\n\n\tfor (var n = 0; rows0[n]; n++) {\n\t\trows0[n] = rows0[n].trim();\n\t\tif (rows0[n] > \"\")\n\t\t\trows.push(rows0[n].split(','));\n\t}\n\twindow[name].value = rows0.join('\\n');\n\n\treturn rows;\n}\n\n"]}